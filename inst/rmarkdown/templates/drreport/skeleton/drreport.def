%%
%% This file contains the code that is common to the Tufte-LaTeX document classes.
%%

\ProvidesFile{dr-common.def}[2011/06/18 v3.5.2 Common code for the Tufte-LaTeX styles]

%%
% The `xkeyval' package simplifies the user interface for the document class options
\RequirePackage{xkeyval}
%%
% We use the `xifthen' package to handle our package option switches
\RequirePackage{xifthen}

\RequirePackage{etoolbox}
\RequirePackage{forloop}
\RequirePackage{epstopdf}
\RequirePackage{mdframed}
\RequirePackage{wrapfig}
\RequirePackage{amsmath}

\mdfdefinestyle{abstract}{%
  rightmargin=0pt,leftmargin=0pt,linecolor=blue,%
  backgroundcolor=abstract,%
  skipabove=0cm,skipbelow=0.5cm,%
  innerleftmargin=4pt,innerrightmargin=4pt,innertopmargin=4pt,innerbottommargin=4pt,%
  linewidth=0.5pt,outerlinewidth=0pt,%
  roundcorner=0pt,%
  innerlinewidth=0pt,middlelinewidth=0pt,%
  align=right,%
  userdefinedwidth=5cm,
  topline=false,bottomline=false}

\newcommand{\abstract}[1]{%
\begin{wrapfigure}{O}[7cm]{5cm}
\vspace{80pt}
\begin{mdframed}[style=abstract]
\vspace{-10pt}
\abstractsize\setlength{\parskip}{10pt}#1
\end{mdframed}
\end{wrapfigure}
}


%%
% Define some shortcut macros for error/warning/info logging.
\RequirePackage{hardwrap}
\GenerateClassLogMacros[@dr]{\@dr@pkgname}
\newcommand{\@dr@debug@info}[1]{\ifthenelse{\boolean{@dr@debug}}{\@dr@info{#1}}{}}
\newcommand{\@dr@debug@info@noline}[1]{\ifthenelse{\boolean{@dr@debug}}{\@dr@info@noline{#1}}{}}

%%
% `debug' option -- provides more information in the .log file for use in
% troubleshooting problems
\newboolean{@dr@debug}
\DeclareOptionX[dr]<common>{debug}{\setboolean{@dr@debug}{true}}

%%
% `nofonts' option -- doesn't load any fonts
% `fonts' option -- tries to load fonts
\newboolean{@dr@loadfonts}\setboolean{@dr@loadfonts}{true}
\DeclareOptionX[dr]<common>{fonts}{\setboolean{@dr@loadfonts}{true}}
\DeclareOptionX[dr]<common>{nofonts}{\setboolean{@dr@loadfonts}{false}}

%%
% `nols' option -- doesn't configure letterspacing
% `ls' option -- configures letterspacing
\newboolean{@dr@letterspace}\setboolean{@dr@letterspace}{true}
\DeclareOptionX[dr]<common>{ls}{\setboolean{@dr@letterspace}{true}}
\DeclareOptionX[dr]<common>{nols}{\setboolean{@dr@letterspace}{false}}

%%
% `nobib' option -- doesn't load natbib or adjust the \cite command
\newboolean{@dr@loadnatbib}\setboolean{@dr@loadnatbib}{true}
\DeclareOptionX[dr]<common>{nobib}{\setboolean{@dr@loadnatbib}{false}}

%%
% `titlepage' option -- creates a full title page with \maketitle

\newboolean{@dr@titlepage}
\DeclareOptionX[dr]<common>{titlepage}{\setboolean{@dr@titlepage}{true}}
\DeclareOptionX[dr]<common>{notitlepage}{\setboolean{@dr@titlepage}{false}}

%%
% `a4paper' option

\newboolean{@dr@afourpaper}
\DeclareOptionX[dr]<common>{a4paper}{\setboolean{@dr@afourpaper}{true}}

%%
% `b5paper' option

\newboolean{@dr@bfivepaper}
\DeclareOptionX[dr]<common>{b5paper}{\setboolean{@dr@bfivepaper}{true}}

%%
% `sfsidenotes' option -- typesets sidenotes in sans serif typeface

\newboolean{@dr@sfsidenotes}
\DeclareOptionX[dr]<common>{sfsidenotes}{\setboolean{@dr@sfsidenotes}{true}}

%%
% `symmetric' option -- puts marginpar space to the outside edge of the page
%   Note: this option forces the twoside option (see the .cls files)

\newboolean{@dr@symmetric}
\DeclareOptionX[dr]<common>{symmetric}{
  \setboolean{@dr@symmetric}{true}
  \@dr@info@noline{The `symmetric' option implies `twoside'}
  \ExecuteOptionsX[dr]<common>{twoside}
}

%%
% `twoside' option -- alternates running heads

\newboolean{@dr@twoside}
\DeclareOptionX[dr]<common>{twoside}{%
  \setboolean{@dr@twoside}{true}
  \@dr@info@noline{Passing the `twoside' option to the `\@dr@class' class}
  \PassOptionsToClass{twoside}{\@dr@class}
}

%%
% `notoc' option -- suppresses the Tufte-style table of contents

\newboolean{@dr@toc}
\setboolean{@dr@toc}{true}
\DeclareOptionX[dr]<common>{notoc}{\setboolean{@dr@toc}{false}}
\DeclareOptionX[dr]<common>{toc}{\setboolean{@dr@toc}{true}}

%%
% `justified' option -- uses fully justified text (flush left and flush
% right) instead of ragged right.

\newboolean{@dr@justified}
\DeclareOptionX[dr]<common>{justified}{\setboolean{@dr@justified}{true}}

%%
% `bidi' option -- loads the bidi package for bi-directional text

\newboolean{@dr@loadbidi}
\DeclareOptionX[dr]<common>{bidi}{\setboolean{@dr@loadbidi}{true}}
\DeclareOptionX[dr]<common>{nobidi}{\setboolean{@dr@loadbidi}{false}}

%%
% `nohyper' option -- suppresses loading of the hyperref package

\newboolean{@dr@loadhyper}
\setboolean{@dr@loadhyper}{true}
\DeclareOptionX[dr]<common>{hyper}{\setboolean{@dr@loadhyper}{true}}
\DeclareOptionX[dr]<common>{nohyper}{\setboolean{@dr@loadhyper}{false}}

%%
% `sidenote', `marginnote', `caption', `citation', `marginals' options
% Each allows one of {justified,raggedleft,raggedright,raggedouter,auto}.

\newcommand*{\@dr@sidenote@justification}{\@dr@justification@autodetect}
\define@choicekey*+[dr]{common}{sidenote}[\@dr@kvtext\@dr@kvnum]{justified,raggedleft,raggedright,raggedouter,auto}[auto]{%
  \ifcase\@dr@kvnum\relax
    \renewcommand*{\@dr@sidenote@justification}{\justifying}% justified
  \or
    \renewcommand*{\@dr@sidenote@justification}{\RaggedLeft}% ragged left
  \or
    \renewcommand*{\@dr@sidenote@justification}{\RaggedRight}% ragged right
  \or
    \renewcommand*{\@dr@sidenote@justification}{\@dr@justification@outer}% ragged outer (flush right on verso pages, flush left on recto pages)
  \or
    \renewcommand*{\@dr@sidenote@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
  \fi
}{%
  \@dr@warning@noline{Invalid option `#1' for sidenote key. Must be one of: justified, raggedleft, raggedright, raggedouter, auto}
  \renewcommand*{\@dr@sidenote@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
}

\newcommand*{\@dr@marginnote@justification}{\@dr@justification@autodetect}
\define@choicekey*+[dr]{common}{marginnote}[\@dr@kvtext\@dr@kvnum]{justified,raggedleft,raggedright,raggedouter,auto}[auto]{%
  \ifcase\@dr@kvnum\relax
    \renewcommand*{\@dr@marginnote@justification}{\justifying}% justified
  \or
    \renewcommand*{\@dr@marginnote@justification}{\RaggedLeft}% ragged left
  \or
    \renewcommand*{\@dr@marginnote@justification}{\RaggedRight}% ragged right
  \or
    \renewcommand*{\@dr@marginnote@justification}{\@dr@justification@outer}% ragged outer (flush right on verso pages, flush left on recto pages)
  \or
    \renewcommand*{\@dr@marginnote@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
  \fi
}{%
  \@dr@warning@noline{Invalid option `#1' for marginnote key. Must be one of: justified, raggedleft, raggedright, raggedouter, auto}
  \renewcommand*{\@dr@marginnote@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
}

\newcommand*{\@dr@caption@justification}{\@dr@justification@autodetect}
\define@choicekey*+[dr]{common}{caption}[\@dr@kvtext\@dr@kvnum]{justified,raggedleft,raggedright,raggedouter,auto}[auto]{%
  \ifcase\@dr@kvnum\relax
    \renewcommand*{\@dr@caption@justification}{\justifying}% justified
  \or
    \renewcommand*{\@dr@caption@justification}{\RaggedLeft}% ragged left
  \or
    \renewcommand*{\@dr@caption@justification}{\RaggedRight}% ragged right
  \or
    \renewcommand*{\@dr@caption@justification}{\@dr@justification@caption@outer}% ragged outer (flush right on verso pages, flush left on recto pages)
  \or
    \renewcommand*{\@dr@caption@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
  \fi
}{%
  \@dr@warning@noline{Invalid option `#1' for caption key. Must be one of: justified, raggedleft, raggedright, raggedouter, auto}
  \renewcommand*{\@dr@caption@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
}

\newcommand*{\@dr@citation@justification}{\@dr@justification@autodetect}
\define@choicekey*+[dr]{common}{citation}[\@dr@kvtext\@dr@kvnum]{justified,raggedleft,raggedright,raggedouter,auto}[auto]{%
  \ifcase\@dr@kvnum\relax
    \renewcommand*{\@dr@citation@justification}{\justifying}% justified
  \or
    \renewcommand*{\@dr@citation@justification}{\RaggedLeft}% ragged left
  \or
    \renewcommand*{\@dr@citation@justification}{\RaggedRight}% ragged right
  \or
    \renewcommand*{\@dr@citation@justification}{\@dr@justification@outer}% ragged outer (flush right on verso pages, flush left on recto pages)
  \or
    \renewcommand*{\@dr@citation@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
  \fi
}{%
  \@dr@warning@noline{Invalid option `#1' for citation key. Must be one of: justified, raggedleft, raggedright, raggedouter, auto}
  \renewcommand*{\@dr@citation@justification}{\@dr@justification@autodetect}% autodetects best justification mode based on all class options
}

% The ``marginals'' key simultaneously sets the same justification for all marginal material
\define@choicekey*+[dr]{common}{marginals}[\@dr@kvtext\@dr@kvnum]{justified,raggedleft,raggedright,raggedouter,auto}[auto]{%
  \ifcase\@dr@kvnum\relax
    \ExecuteOptionsX[dr]<common>{citation=justified,sidenote=justified,caption=justified,marginnote=justified}% justified
  \or
    \ExecuteOptionsX[dr]<common>{citation=raggedleft,sidenote=raggedleft,caption=raggedleft,marginnote=raggedleft}% ragged left
  \or
    \ExecuteOptionsX[dr]<common>{citation=raggedright,sidenote=raggedright,caption=raggedright,marginnote=raggedright}% ragged right
  \or
    \ExecuteOptionsX[dr]<common>{citation=raggedouter,sidenote=raggedouter,caption=raggedouter,marginnote=raggedouter}% ragged outer (flush right on verso pages, flush left on recto pages)
  \or
    \ExecuteOptionsX[dr]<common>{citation=auto,sidenote=auto,caption=auto,marginnote=auto}% autodetects best justification mode based on all class options
  \fi
}{%
  \@dr@warning@noline{Invalid option `#1' for marginals key. Must be one of: justified, raggedleft, raggedright, raggedouter, auto}
  \ExecuteOptionsX[dr]<common>{citation=auto,sidenote=auto,caption=auto,marginnote=auto}% autodetects best justification mode based on all class options
}


%%
% Unsupported options

\newcommand{\@dr@unsupported@option}[1]{\@dr@warning@noline{Option `#1' is not supported -- ignoring option}\OptionNotUsed}

\DeclareOptionX[dr]<common>{10pt}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{11pt}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{12pt}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{a5paper}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{executivepaper}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{legalpaper}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{landscape}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{onecolumn}{\@dr@unsupported@option{\CurrentOption}}
\DeclareOptionX[dr]<common>{twocolumn}{\@dr@unsupported@option{\CurrentOption}}

\DeclareOptionX*{%
  \@dr@info@noline{Passing \CurrentOption\space to the `\@dr@class' class.}%
  \PassOptionsToClass{\CurrentOption}{\@dr@class}%
}
\ProcessOptionsX*[dr]<common>\relax

%%
% Load the appropriate base class
\@dr@info@noline{Loading the base class `\@dr@class'}
\LoadClass{\@dr@class}

%%
% Detect whether we're in two-side mode or not.  (Used to set up running
% heads later.)

\ifthenelse{\boolean{@twoside}}
  {\setboolean{@dr@twoside}{true}}
  {}



%%
% Detect if we're using pdfLaTeX

\newboolean{@dr@pdf}
\IfFileExists{ifpdf.sty}{%
  \RequirePackage{ifpdf}
  \ifthenelse{\boolean{pdf}}
    {\setboolean{@dr@pdf}{true}}
    {\setboolean{@dr@pdf}{false}}
}{% assume we're not using pdfTex?
  \setboolean{@dr@pdf}{false}
}

%%
% Detect if we're using XeLaTeX

\newboolean{@dr@xetex}
\IfFileExists{ifxetex.sty}{%
  \RequirePackage{ifxetex}
  \ifthenelse{\boolean{xetex}}
    {\setboolean{@dr@xetex}{true}}
    {\setboolean{@dr@xetex}{false}}
}{% not using xelatex
  \setboolean{@dr@xetex}{false}
}

\ifthenelse{\boolean{@dr@xetex}}{%
  \RequirePackage{xltxtra}% xltxtra loads xunicode and fontspec; must be loaded before bidi
}{}

%%
% Detect if we're using LuaTeX

\newboolean{@dr@luatex}
\IfFileExists{ifluatex.sty}{%
  \RequirePackage{ifluatex}
  \ifthenelse{\boolean{luatex}}
    {\setboolean{@dr@luatex}{true}}
    {\setboolean{@dr@luatex}{false}}
}{% not using luatex
  \setboolean{@dr@luatex}{false}
}

\ifthenelse{\boolean{@dr@luatex}}{%
  \RequirePackage{fontspec}
  \RequirePackage[osf,sc]{mathpazo}
  \setmainfont[Renderer=Basic, Numbers=OldStyle, Scale = 1.0]{TeX Gyre Pagella}
  \setsansfont[Renderer=Basic, Scale=0.90]{TeX Gyre Heros}
  \setmonofont[Renderer=Basic]{TeX Gyre Cursor}
}{}

%%
% Globally sets the length

\newcommand*{\gsetlength}[2]{%
  \setlength{#1}{#2}%
  \global#1=#1\relax%
}

%%
% Globally sets a boolean

\newcommand*{\gsetboolean}[2]{% based on code from ifthen pkg
  \lowercase{\def\@tempa{#2}}%
  \@ifundefined{@tempswa\@tempa}%
    {\PackageError{ifthen}{You can only set a boolean to `true' or `false'}\@ehc}%
    {\@ifundefined{#1\@tempa}%
      {\PackageError{ifthen}{Boolean #1 undefined}\@ehc}%
      {\global\csname#1\@tempa\endcsname}%
    }%
}

%%
% The titlesec and titletoc packages are used to change the style of the
% section headings.  These packages should be loaded before the hyperref
% package.

\RequirePackage{titlesec,titletoc}

%%
% Color - load before hypersetup
\RequirePackage[usenames,dvipsnames,svgnames]{xcolor}% load before bidi

%% Define Digital Reasoning colors
\definecolor{drblue}{RGB}{0 102 153}
\definecolor{drbrown}{RGB}{204 153 52}
\definecolor{drgrey}{RGB}{122 122 122}
\definecolor{drgreen}{RGB}{102 153 51}
\definecolor{abstract}{RGB}{204 220 250}

%%%
%% Loads the hyperref package and sets some default options.

\newcommand{\TufteLoadHyperref}{%
  \ifthenelse{\boolean{@dr@xetex}}
    {\RequirePackage[unicode,hyperfootnotes=false,xetex]{hyperref}}
    {\RequirePackage[unicode,hyperfootnotes=false]{hyperref}}
  \hypersetup{%
    pdfborder = {0 0 0},
    bookmarksdepth = section,
  }%
}

%%%
%% Load the `hyperref' package.

\ifthenelse{\boolean{@dr@loadhyper}}{%
  \TufteLoadHyperref%
}{% hyperfootnotes override our modifications to the \footnote* and \@footnote* commands.
  \PassOptionsToPackage{hyperfootnotes=false}{hyperref}
}

%%
% Set the font sizes and baselines to match Tufte's books
\renewcommand\normalsize{%
   \@setfontsize\normalsize\@xpt{10}%
   \abovedisplayskip 13\p@ \@plus2\p@ \@minus5\p@
   \abovedisplayshortskip \z@ \@plus3\p@
   \belowdisplayshortskip 6\p@ \@plus3\p@ \@minus3\p@
   \belowdisplayskip \abovedisplayskip
   \linespread{1.2}
   \let\@listi\@listI}
\normalbaselineskip=15.6pt

\normalsize
\renewcommand\small{%
   \@setfontsize\small\@viipt{10}%
   \abovedisplayskip 8.5\p@ \@plus3\p@ \@minus4\p@
   \abovedisplayshortskip \z@ \@plus2\p@
   \belowdisplayshortskip 4\p@ \@plus2\p@ \@minus2\p@
   \def\@listi{\leftmargin\leftmargini
               \topsep 4\p@ \@plus2\p@ \@minus2\p@
               \parsep 2\p@ \@plus\p@ \@minus\p@
               \itemsep \parsep}%
   \belowdisplayskip \abovedisplayskip
}
\normalsize
\newcommand\abstractsize{%
   \@setfontsize\abstractsize\@viipt{12}%
   \abovedisplayskip 8.5\p@ \@plus3\p@ \@minus4\p@
   \abovedisplayshortskip \z@ \@plus2\p@
   \belowdisplayshortskip 4\p@ \@plus2\p@ \@minus2\p@
   \def\@listi{\leftmargin\leftmargini
               \topsep 4\p@ \@plus2\p@ \@minus2\p@
               \parsep 2\p@ \@plus\p@ \@minus\p@
               \itemsep \parsep}%
   \belowdisplayskip \abovedisplayskip
   \baselineskip=10pt
}
\renewcommand\footnotesize{%
   \@setfontsize\footnotesize\@xpt{10}%
   \abovedisplayskip 6\p@ \@plus2\p@ \@minus4\p@
   \abovedisplayshortskip \z@ \@plus\p@
   \belowdisplayshortskip 3\p@ \@plus\p@ \@minus2\p@
   \def\@listi{\leftmargin\leftmargini
               \topsep 3\p@ \@plus\p@ \@minus\p@
               \parsep 2\p@ \@plus\p@ \@minus\p@
               \itemsep \parsep}%
   \belowdisplayskip \abovedisplayskip
}
\renewcommand\scriptsize{\@setfontsize\scriptsize\@viipt\@viiipt}
\renewcommand\tiny{\@setfontsize\tiny\@vpt\@vipt}
\renewcommand\large{\@setfontsize\large\@xipt{11}}
\renewcommand\Large{\@setfontsize\Large\@xiipt{16}}
\renewcommand\LARGE{\@setfontsize\LARGE\@xivpt{18}}
\renewcommand\huge{\@setfontsize\huge\@xxpt{30}}
\renewcommand\Huge{\@setfontsize\Huge{24}{36}}

\setlength\leftmargini   {1pc}
\setlength\leftmarginii  {1pc}
\setlength\leftmarginiii {1pc}
\setlength\leftmarginiv  {1pc}
\setlength\leftmarginv   {1pc}
\setlength\leftmarginvi  {1pc}
\setlength\labelsep      {.5pc}
\setlength\labelwidth    {\leftmargini}
\addtolength\labelwidth{-\labelsep}

%%
% \RaggedRight allows hyphenation

\setlength{\parindent}{1.0pc}%
\setlength{\parskip}{0pt}%
\RequirePackage{ragged2e}
\setlength{\RaggedRightRightskip}{\z@ plus 0.08\hsize}

% Paragraph indentation and separation for normal text
\newcommand{\@dr@reset@par}{%
  \setlength{\RaggedRightParindent}{1.0pc}%
  \setlength{\JustifyingParindent}{1.0pc}%
  \setlength{\baselineskip}{12pt}
  \setlength{\parindent}{1pc}%
  \setlength{\parskip}{9pt}%
}
\@dr@reset@par

% Paragraph indentation and separation for marginal text
\newcommand{\@dr@margin@par}{%
  \setlength{\RaggedRightParindent}{0.5pc}%
  \setlength{\JustifyingParindent}{0.5pc}%
  \setlength{\parindent}{0.5pc}%
  \setlength{\parskip}{0pt}%
}


%%
% Set page layout geometry

\RequirePackage[letterpaper,left=1in,top=1in,headsep=2\baselineskip,textwidth=26pc,marginparsep=2pc,marginparwidth=12pc,textheight=53\baselineskip,headheight=\baselineskip]{geometry}

\ifthenelse{\boolean{@dr@afourpaper}}
  {\geometry{a4paper,left=24.8mm,top=27.4mm,headsep=2\baselineskip,textwidth=107mm,marginparsep=8.2mm,marginparwidth=49.4mm,textheight=49\baselineskip,headheight=\baselineskip}}
  {}

\ifthenelse{\boolean{@dr@bfivepaper}}
  {\geometry{paperwidth=176mm,paperheight=250mm,left=14.66mm,top=13.88mm,textwidth=102.66mm,marginparsep=7.33mm,marginparwidth=36.66mm,textheight=38\baselineskip,includehead}}
  {}

\ifthenelse{\boolean{@dr@symmetric}}
  {}
  {\geometry{asymmetric}}% forces internal LaTeX `twoside'


%%
% Separation marginpars by a line's worth of space.

\setlength\marginparpush{10pt}

%%
% Font for margin items

\ifthenelse{\boolean{@dr@sfsidenotes}}
  {\newcommand{\@dr@marginfont}{\normalfont\footnotesize\sffamily}}
  {\newcommand{\@dr@marginfont}{\normalfont\footnotesize}}

\newcommand*{\@dr@sidenote@font}{\@dr@marginfont}
\newcommand*{\@dr@caption@font}{\@dr@marginfont}
\newcommand*{\@dr@marginnote@font}{\@dr@marginfont}
\newcommand*{\@dr@citation@font}{\@dr@marginfont}

\newcommand*{\setsidenotefont}[1]{\renewcommand*{\@dr@sidenote@font}{#1}}
\newcommand*{\setcaptionfont}[1]{\renewcommand*{\@dr@caption@font}{#1}}
\newcommand*{\setmarginnotefont}[1]{\renewcommand*{\@dr@marginnote@font}{#1}}
\newcommand*{\setcitationfont}[1]{\renewcommand*{\@dr@citation@font}{#1}}

%%
% Set the justification baesed on the `justified' class option

\newcommand{\@dr@justification}{%
  \ifthenelse{\boolean{@dr@justified}}%
    {\justifying}%
    {\RaggedRight}%
}

%%
% Turn off section numbering

\setcounter{secnumdepth}{-1}

%%
% Tighten up space between displays (e.g., a figure or table) and make symmetric

\setlength\abovedisplayskip{6pt plus 2pt minus 4pt}
\setlength\belowdisplayskip{6pt plus 2pt minus 4pt}

%%
% To implement full-width display environments

\newboolean{@dr@changepage}
\IfFileExists{changepage.sty}{%
  \@dr@debug@info@noline{Found changepage.sty}
  \RequirePackage[strict]{changepage}
  \setboolean{@dr@changepage}{true}
}{%
  \@dr@debug@info@noline{Found chngpage.sty}
  \RequirePackage[strict]{chngpage}
  \setboolean{@dr@changepage}{false}
}

% Write our own aliases for the \checkoddpage and \ifoddpage or \ifcpoddpage commands
\newboolean{@dr@odd@page}
\setboolean{@dr@odd@page}{true}
\newcommand*{\@dr@checkoddpage}{%
  \checkoddpage%
  \ifthenelse{\boolean{@dr@changepage}}{%
    \ifoddpage%
      \setboolean{@dr@odd@page}{true}%
    \else%
      \setboolean{@dr@odd@page}{false}%
    \fi%
  }{%
    \ifcpoddpage%
      \setboolean{@dr@odd@page}{true}%
    \else%
      \setboolean{@dr@odd@page}{false}%
    \fi%
  }%
}

%%
% Compute lengths used for full-width displays

\newlength{\@dr@overhang}% used by the fullwidth environment and the running heads
\newlength{\@dr@fullwidth}
\newlength{\@dr@caption@fill}

\newcommand{\TufteRecalculate}{%
  \setlength{\@dr@overhang}{\marginparwidth}
  \addtolength{\@dr@overhang}{\marginparsep}

  \setlength{\@dr@fullwidth}{\textwidth}
  \addtolength{\@dr@fullwidth}{\marginparsep}
  \addtolength{\@dr@fullwidth}{\marginparwidth}

  \setlength{\@dr@caption@fill}{\textwidth}
  \addtolength{\@dr@caption@fill}{\marginparsep}
}

\AtBeginDocument{\TufteRecalculate}

%%
% Modified \title, \author, and \date commands.  These store the
% (footnote-less) values in \plaintitle, \plainauthor, and \thedate, respectively.

\newcommand{\plaintitle}{}%     plain-text-only title
\newcommand{\plainauthor}{}%    plain-text-only author
\newcommand{\plainpublisher}{}% plain-text-only publisher

\newcommand{\thanklesstitle}{}%     full title text minus \thanks{}
\newcommand{\thanklessauthor}{}%    full author text minus \thanks{}
\newcommand{\thanklesspublisher}{}% full publisher minus \thanks{}

\newcommand{\@publisher}{}% full publisher with \thanks{}
\newcommand{\thedate}{\today}

% TODO Fix it so that \thanks is not spaced out (with `soul') and can be
% used in \maketitle when the `sfsidenotes' option is provided.
\renewcommand{\thanks}[1]{\NoCaseChange{\footnote{#1}}}

\renewcommand{\title}[2][]{%
  \gdef\@title{#2}%
  \begingroup%
    % TODO store contents of \thanks command
    \renewcommand{\thanks}[1]{}% swallow \thanks contents
    \protected@xdef\thanklesstitle{#2}%
  \endgroup%
  \ifthenelse{\isempty{#1}}%
    {\renewcommand{\plaintitle}{\thanklesstitle}}% use thankless title
    {\renewcommand{\plaintitle}{#1}}% use provided plain-text title
   \ifthenelse{\isundefined{\hypersetup}}%
    {}
    {\hypersetup{pdftitle={\plaintitle}}}% set the PDF metadata title
}

\newcommand{\preparedfor}[2][]{%
  \gdef\@preparedfor{#2}%
  \begingroup%
    % TODO store contents of \thanks command
    \renewcommand{\thanks}[1]{}% swallow \thanks contents
    \protected@xdef\thanklesspreparedfor{#2}%
  \endgroup%
  \ifthenelse{\isempty{#1}}%
    {\newcommand{\plainpreparedfor}{\thanklesspreparedfor}}% use thankless title
    {\newcommand{\plainpreparedfor}{#1}}% use provided plain-text title
}

\let\@author\@empty% suppress default latex.ltx ``no author'' warning
\newcounter{authors}
\setcounter{authors}{0}
\newcommand{\addauthor}[2]{%
    % {\renewcommand{\plainauthor}{\thanklessauthor}}% use thankless author
    % {\renewcommand{\plainauthor}{#1}}% use provided plain-text author
  \ifthenelse{\value{authors} = 0}
    {
      \hypersetup{pdfauthor={\plainauthor}}
      \renewcommand{\thanks}[1]{}% swallow \thanks contents
      \protected@xdef\thanklessauthor{#2}%
    }
    {}
  % \ifthenelse{\isempty{#2}}{}{\gdef\@author{#2}}%
  \csdef{authors\theauthors}{#1}
  \csdef{emails\theauthors}{#2}
  \stepcounter{authors}
}

\newcommand{\getauthor}[1]{
  \csuse{authors\arabic{#1}} \> \csuse{emails\arabic{#1}} \\
}

\renewcommand{\date}[1]{%
  \gdef\@date{#1}%
  \begingroup%
    % TODO store contents of \thanks command
    \renewcommand{\thanks}[1]{}% swallow \thanks contents
    \protected@xdef\thedate{#1}%
  \endgroup%
}

%%
% Provides a \publisher command to set the publisher

\newcommand{\publisher}[2][]{%
  \gdef\@publisher{#2}%
  \begingroup%
    \renewcommand{\thanks}[1]{}% swallow \thanks contents
    \protected@xdef\thanklesspublisher{#2}%
  \endgroup%
  \ifthenelse{\isempty{#1}}
    {\renewcommand{\plainpublisher}{\thanklesspublisher}}% use thankless publisher
    {\renewcommand{\plainpublisher}{#1}}% use provided plain-text publisher
}

% TODO: Test \hypersetup{pdfauthor,pdftitle} with DVI and XeTeX

%%
% Require paralist package for tighter lists

\RequirePackage{paralist}

% Add rightmargin to compactenum

\def\@compactenum@{%
  \expandafter\list\csname label\@enumctr\endcsname{%
    \usecounter{\@enumctr}%
    \rightmargin=2em% added this
    \parsep\plparsep
    \itemsep\plitemsep
    \topsep\pltopsep
    \partopsep\plpartopsep
    \def\makelabel##1{\hss\llap{##1}}}}

%%
% Improved letterspacing of small caps and all-caps text.
%
% First, try to use the `microtype' package, if it's available.
% Failing that, try to use the `soul' package, if it's available.
% Failing that, well, I give up.

\DeclareTextFontCommand{\textsmallcaps}{\scshape}

\RequirePackage{textcase} % provides \MakeTextUppercase and \MakeTextLowercase
\def\allcapsspacing{\@dr@warning{Proper spacing of ALL-CAPS letters has not been set up.}}
\def\smallcapsspacing{\@dr@warning{Proper spacing of small-caps letters has not been set up.}}
\newcommand{\allcaps}[1]{\allcapsspacing{\MakeTextUppercase{#1}}}
\newcommand{\smallcaps}[1]{\smallcapsspacing{\MakeTextLowercase{#1}}}

% If we're using pdfLaTeX v1.40+, use the letterspace package.
% If we're using pdfLaTex < v1.40, use the soul package.
% If we're using XeLaTeX, use XeLaTeX letterspacing options.
% Otherwise fall back on the soul package.

\ifthenelse{\boolean{@dr@pdf}}
  {\@dr@debug@info@noline{ifpdf = true}}
  {\@dr@debug@info@noline{ifpdf = false}}

\ifthenelse{\boolean{@dr@xetex}}
  {\@dr@debug@info@noline{ifxetex = true}}
  {\@dr@debug@info@noline{ifxetex = false}}

% Check pdfLaTeX version
\def\@dr@pdftexversion{0}
\ifx\normalpdftexversion\@undefined \else
  \let\pdftexversion \normalpdftexversion
  \let\pdftexrevision\normalpdftexrevision
  \let\pdfoutput     \normalpdfoutput
\fi
\ifx\pdftexversion\@undefined \else
  \ifx\pdftexversion\relax \else
    \def\@dr@pdftexversion{6}
    \ifnum\pdftexversion < 140
      \def\@dr@pdftexversion{5}
    \fi
  \fi
\fi

\newboolean{@dr@letterspace@pkg@prereqs}
\setboolean{@dr@letterspace@pkg@prereqs}{true}
\ifnum\@dr@pdftexversion<6
  \setboolean{@dr@letterspace@pkg@prereqs}{false}
\fi


\newcommand{\@dr@letterspacing@soul}{%
  \RequirePackage{soul}%
  \sodef\allcapsspacing{}{0.15em}{0.65em}{0.6em}%
  \sodef\smallcapsspacing{}{0.075em}{0.5em}{0.6em}%
  \sodef\sotextsc{\scshape}{0.075em}{0.5em}{0.6em}%
  \renewcommand{\allcaps}[1]{\allcapsspacing{\MakeTextUppercase{##1}}}%
  \renewcommand{\smallcaps}[1]{\smallcapsspacing{\scshape\MakeTextLowercase{##1}}}%
  \renewcommand{\textsc}[1]{\sotextsc{##1}}%
}

\newcommand{\@dr@letterspacing@letterspace}{%
  \@dr@debug@info@noline{Modern version of pdfTeX detected. Using `letterspace' package}%
  \RequirePackage{letterspace}%
  % Set up letterspacing (using microtype package) -- requires pdfTeX v1.40+
  \renewcommand{\allcapsspacing}[1]{\textls[200]{##1}}%
  \renewcommand{\smallcapsspacing}[1]{\textls[50]{##1}}%
  \renewcommand{\allcaps}[1]{\allcapsspacing{\MakeTextUppercase{##1}}}%
  \renewcommand{\smallcaps}[1]{\smallcapsspacing{\scshape\MakeTextLowercase{##1}}}%
  \renewcommand{\textsc}[1]{\smallcapsspacing{\textsmallcaps{##1}}}%
}

\ifthenelse{\boolean{@dr@letterspace}}{%
  \ifthenelse{\boolean{@dr@pdf}\AND\boolean{@dr@letterspace@pkg@prereqs}\AND\NOT\boolean{@dr@xetex}}{%
    % load letterspace pkg
    \IfFileExists{letterspace.sty}{%
      \@dr@letterspacing@letterspace
    }{}%
  }{}%
  % load soul pkg
  \@ifpackageloaded{letterspace}{}{%
    \IfFileExists{soul.sty}{%
      \@dr@letterspacing@soul
    }{%
      \@dr@warning@noline{Couldn't locate `soul' package}%
    }% soul not installed... giving up.
  }%
}{}

%\ifthenelse{\boolean{@dr@letterspace}}{%
  %\ifthenelse{\boolean{pdf}}{%
    %\ifthenelse{\NOT\boolean{@dr@letterspace@pkg@prereqs}}{%
      %% pdfLaTeX version is too old or not using pdfLaTeX
      %\ifthenelse{\boolean{@dr@xetex}}{%
        %% TODO use xetex letterspacing
        %\@dr@debug@info@noline{XeTeX detected. Reverting to `soul' package for letterspacing}%
        %\@dr@loadsoul%
      %}{%
        %% use `soul' package for letterspacing
        %\@dr@debug@info@noline{Old version of pdfTeX detected. Reverting to `soul' package for letterspacing}%
        %\@dr@loadsoul%
      %}
    %}{%
      %\IfFileExists{letterspace.sty}{%
        %\@dr@debug@info@noline{Modern version of pdfTeX detected. Using `letterspace' package}
        %\RequirePackage{letterspace}
        %% Set up letterspacing (using microtype package) -- requires pdfTeX v1.40+
        %\renewcommand{\allcapsspacing}[1]{\textls[200]{##1}}
        %\renewcommand{\smallcapsspacing}[1]{\textls[50]{##1}}
        %\renewcommand{\allcaps}[1]{\textls[200]{\MakeTextUppercase{##1}}}
        %\renewcommand{\smallcaps}[1]{\smallcapsspacing{\MakeTextLowercase{##1}}}
        %\renewcommand{\textsc}[1]{\smallcapsspacing{\textsmallcaps{##1}}}
      %}{% microtype failed, check for soul
        %\@dr@debug@info@noline{Modern version of pdfTeX detected, but `letterspace' package not installed.  Reverting to  `soul' package for letterspacing}
        %\@dr@loadsoul
      %}%
    %}%
  %}{%
    %\@dr@debug@info@noline{Plain LaTeX detected. Using `soul' package for letterspacing}
    %\@dr@loadsoul
  %}
%}{%
%% we're not to load letterspacing, so do nothing
%}


%%
% An environment for paragraph-style section

\providecommand\newthought[1]{%
   \drbreak
   \noindent\textsc{#1}%
}

%%
% Redefine the display environments (quote, quotation, etc.)

\renewenvironment{verse}
               {\let\\\@centercr
                \list{}{\itemsep      \z@
                        \itemindent   -1pc%
                        \listparindent\itemindent
                        \rightmargin  \leftmargin
                        \advance\leftmargin 1pc}%
                \small%
                \item\relax}
               {\endlist}
\renewenvironment{quotation}
               {\list{}{\listparindent 1pc%
                        \itemindent    \listparindent
                        \rightmargin   \leftmargin
                        \parsep        \z@ \@plus\p@}%
                \small%
                \item\relax\noindent\ignorespaces}
               {\endlist}
\renewenvironment{quote}
               {\list{}{\rightmargin\leftmargin}%
                \small%
                \item\relax}
               {\endlist}

%%
% Italicize description run-in headings (instead of the default bold)

\renewcommand*\descriptionlabel[1]{\hspace\labelsep\normalfont\em #1}


%%
% Used for doublespacing, and other linespacing

\RequirePackage{setspace}

%%
% Load the bidi package if instructed to do so.  This package must be loaded
% prior to our redefining the \footnote and \cite commands.

\ifthenelse{\boolean{@dr@loadbidi}}{%
  \AtBeginDocument{%
    \RequirePackage{bidi}
    \@dr@pkghook@post@bidi%
  }%
}{}


%%
% A function that removes leading and trailling spaces from the supplied macro.
% Based on code written by Michael Downes (See ``Around the Bend'', #15.)
% Executing \@dr@trim@spaces\xyzzy will result in the contents of \xyzzy
% being trimmed of leading and trailing white space.

\catcode`\Q=3
\def\@dr@trim@spaces#1{%
  % Use grouping to emulate a multi-token afterassignment queue
  \begingroup%
  % Put `\toks 0 {' into the afterassignment queue
  \aftergroup\toks\aftergroup0\aftergroup{%
  % Apply \trimb to the replacement text of #1, adding a leading
  % \noexpand to prevent brace stripping and to serve another purpose
  % later.
  \expandafter\@dr@trim@b\expandafter\noexpand#1Q Q}%
  % Transfer the trimmed text back into #1.
  \edef#1{\the\toks0}%
}

% \trimb removes a trailing space if present, then calls \@dr@trim@c to
% clean up any leftover bizarre Qs, and trim a leading space. In
% order for \trimc to work properly we need to put back a Q first.
\def\@dr@trim@b#1 Q{\@dr@trim@c#1Q}

% Execute \vfuzz assignment to remove leading space; the \noexpand
% will now prevent unwanted expansion of a macro or other expandable
% token at the beginning of the trimmed text. The \endgroup will feed
% in the \aftergroup tokens after the \vfuzz assignment is completed.
\def\@dr@trim@c#1Q#2{\afterassignment\endgroup \vfuzz\the\vfuzz#1}
\catcode`\Q=11

%%
% Citations should go in the margin as sidenotes

\ifthenelse{\boolean{@dr@loadnatbib}}{%
  \RequirePackage{natbib}%
  \RequirePackage{bibentry}% allows bibitems to be typeset outside thebibliography environment
  % Redefine the \BR@b@bibitem command to fix a bug with bibentry+chicago style
  \renewcommand\BR@b@bibitem[2][]{%
    \ifthenelse{\isempty{#1}}%
      {\BR@bibitem{#2}}%
      {\BR@bibitem[#1]{#2}}%
    \BR@c@bibitem{#2}%
  }%
  \nobibliography*% pre-loads the bibliography keys
  \providecommand{\doi}[1]{\textsc{doi:} #1}% pre-defining this so it may be used before the \bibliography command it issued
}{}

%%
% Normal \cite behavior
\newcounter{@dr@num@bibkeys}%
\newcommand{\@dr@normal@cite}[2][0pt]{%
  % Snag the last bibentry in the list for later comparison
  \let\@temp@last@bibkey\@empty%
  \@for\@temp@bibkey:=#2\do{\let\@temp@last@bibkey\@temp@bibkey}%
  \sidenote[][#1]{%
    % Loop through all the bibentries, separating them with semicolons and spaces
    \normalsize\normalfont\@dr@citation@font%
    \setcounter{@dr@num@bibkeys}{0}%
    \@for\@temp@bibkeyx:=#2\do{%
      \ifthenelse{\equal{\@temp@last@bibkey}{\@temp@bibkeyx}}%
        {\ifthenelse{\equal{\value{@dr@num@bibkeys}}{0}}{}{and\ }%
         \@dr@trim@spaces\@temp@bibkeyx% trim spaces around bibkey
         \bibentry{\@temp@bibkeyx}}%
        {\@dr@trim@spaces\@temp@bibkeyx% trim spaces around bibkey
         \bibentry{\@temp@bibkeyx};\ }%
      \stepcounter{@dr@num@bibkeys}%
    }%
  }%
}


%%
% Macros for holding the list of cite keys until after the \sidenote

\gdef\@dr@citations{}% list of cite keys
\newcommand\@dr@add@citation[1]{\relax% adds a new bibkey to the list of cite keys
  \ifx\@dr@citations\@empty\else
    \g@addto@macro\@dr@citations{,}% separate by commas
  \fi
  \g@addto@macro\@dr@citations{#1}
}

\newcommand{\@dr@print@citations}[1][0pt]{% puts the citations in a margin note
  % Snag the last bibentry in the list for later comparison
  \let\@temp@last@bibkey\@empty%
  \@for\@temp@bibkey:=\@dr@citations\do{\let\@temp@last@bibkey\@temp@bibkey}%
  \marginpar{%
    \hbox{}\vspace*{#1}%
    \@dr@citation@font%
    \@dr@citation@justification%
    \@dr@margin@par% use parindent and parskip settings for marginal text
    \vspace*{-1\baselineskip}%
    % Loop through all the bibentries, separating them with semicolons and spaces
    \setcounter{@dr@num@bibkeys}{0}%
    \@for\@temp@bibkeyx:=\@dr@citations\do{%
      \ifthenelse{\equal{\@temp@last@bibkey}{\@temp@bibkeyx}}%
        {\ifthenelse{\equal{\value{@dr@num@bibkeys}}{0}}{}{and\ }%
         \@dr@trim@spaces\@temp@bibkeyx% trim spaces around bibkey
         \bibentry{\@temp@bibkeyx}}%
        {\@dr@trim@spaces\@temp@bibkeyx% trim spaces around bibkey
         \bibentry{\@temp@bibkeyx};\ }%
      \stepcounter{@dr@num@bibkeys}%
    }%
  }%
}

%%
% \cite behavior when executed within a sidenote

\newcommand{\@dr@sidenote@citations}{}% contains list of \cites in sidenote
\newcommand{\@dr@infootnote@cite}[1]{%
  \@dr@add@citation{#1}
}

%%
% Set the default \cite style.  This is set and reset by the \sidenote command.

\ifthenelse{\boolean{@dr@loadnatbib}}{%
  \let\cite\@dr@normal@cite
}{}

%%
% Transform existing \footnotes into \sidenotes
% Sidenote: ``Where God meant footnotes to go.'' ---Tufte

\RequirePackage{optparams}% for our new sidenote commands -- provides multiple optional arguments for commands

\providecommand{\footnotelayout}{\@dr@sidenote@font\@dr@sidenote@justification}
\renewcommand{\footnotelayout}{\@dr@sidenote@font\@dr@sidenote@justification}

% Override footmisc's definition to set the sidenote marks (numbers) inside the
% sidenote's text block.
\long\def\@makefntext#1{\@textsuperscript{\@dr@sidenote@font\tiny\@thefnmark}\,\footnotelayout#1}

% Set the in-text footnote mark in the same typeface as the body text itself.
\def\@makefnmark{\hbox{\@textsuperscript{\normalfont\footnotesize\@thefnmark}}}

\providecommand*{\multiplefootnotemarker}{3sp}
\providecommand*{\multfootsep}{,}

\renewcommand{\@footnotemark}{%
  \leavevmode%
  \ifhmode%
    \edef\@x@sf{\the\spacefactor}%
    \@dr@check@multiple@sidenotes%
    \nobreak%
  \fi%
  \@makefnmark%
  \ifhmode\spacefactor\@x@sf\fi%
  \relax%
}

\newcommand{\@dr@check@multiple@sidenotes}{%
  \ifdim\lastkern=\multiplefootnotemarker\relax%
    \edef\@x@sf{\the\spacefactor}%
    \unkern%
    \textsuperscript{\multfootsep}%
    \spacefactor\@x@sf\relax%
  \fi
}

\renewcommand\@footnotetext[2][0pt]{%
  \marginpar{%
    \hbox{}\vspace*{#1}%
    \def\baselinestretch {\setspace@singlespace}%
    \reset@font\footnotesize%
    \@dr@margin@par% use parindent and parskip settings for marginal text
    \vspace*{-1\baselineskip}\noindent%
    \protected@edef\@currentlabel{%
       \csname p@footnote\endcsname\@thefnmark%
    }%
    \color@begingroup%
       \@makefntext{%
         \ignorespaces#2%
       }%
    \color@endgroup%
  }%
}%

% Ensure this is run after the bidi package has been loaded
\def\@dr@pkghook@post@bidi{}%
\g@addto@macro{\@dr@pkghook@post@bidi}{%
  \renewcommand\@footnotetext[2][0pt]{%
    \marginpar{%
      \hbox{}\vspace*{#1}%
      \def\baselinestretch {\setspace@singlespace}%
      \if@rl@footnote\@rltrue\else\@rlfalse\fi%
      \reset@font\footnotesize%
      \@dr@margin@par% use parindent and parskip settings for marginal text
      \vspace*{-1\baselineskip}\noindent%
      \protected@edef\@currentlabel{%
         \csname p@footnote\endcsname\@thefnmark%
      }%
      \color@begingroup%
         \@makefntext{%
           \ignorespaces#2%
         }%
      \color@endgroup%
    }%
  }%
}%

%
% Define \sidenote command.  Can handle \cite.

\newlength{\@dr@sidenote@vertical@offset}
\setlength{\@dr@sidenote@vertical@offset}{0pt}

% #1 = footnote num, #2 = vertical offset, #3 = footnote text
\long\def\@dr@sidenote[#1][#2]#3{%
  \ifthenelse{\boolean{@dr@loadnatbib}}{%
    \let\cite\@dr@infootnote@cite%   use the in-sidenote \cite command
  }{}%
  \gdef\@dr@citations{}%           clear out any old citations
  \ifthenelse{\NOT\isempty{#2}}{%
    \gsetlength{\@dr@sidenote@vertical@offset}{#2}%
  }{%
    \gsetlength{\@dr@sidenote@vertical@offset}{0pt}%
  }%
  \ifthenelse{\isempty{#1}}{%
    % no specific footnote number provided
    \stepcounter\@mpfn%
    \protected@xdef\@thefnmark{\thempfn}%
    \@footnotemark\@footnotetext[\@dr@sidenote@vertical@offset]{#3}%
  }{%
    % specific footnote number provided
    \begingroup%
      \csname c@\@mpfn\endcsname #1\relax%
      \unrestored@protected@xdef\@thefnmark{\thempfn}%
    \endgroup%
    \@footnotemark\@footnotetext[\@dr@sidenote@vertical@offset]{#3}%
  }%
  \@dr@print@citations%            print any citations
  \ifthenelse{\boolean{@dr@loadnatbib}}{%
    \let\cite\@dr@normal@cite%       go back to using normal in-text \cite command
  }{}%
  \unskip\ignorespaces%               remove extra white space
  \kern-\multiplefootnotemarker%      remove \kern left behind by sidenote
  \kern\multiplefootnotemarker\relax% add new \kern here to replace the one we yanked
}

\newcommand{\sidenote}{\optparams{\@dr@sidenote}{[][0pt]}}
\renewcommand{\footnote}{\optparams{\@dr@sidenote}{[][0pt]}}

%%
% Sidenote without the footnote mark

\newcommand\marginnote[2][0pt]{%
  \ifthenelse{\boolean{@dr@loadnatbib}}{%
    \let\cite\@dr@infootnote@cite%   use the in-sidenote \cite command
  }{}%
  \gdef\@dr@citations{}%           clear out any old citations
  \marginpar{\hbox{}\vspace*{#1}\@dr@marginnote@font\@dr@marginnote@justification\@dr@margin@par\vspace*{-1\baselineskip}\noindent #2}%
  \@dr@print@citations%            print any citations
  \ifthenelse{\boolean{@dr@loadnatbib}}{%
    \let\cite\@dr@normal@cite%       go back to using normal in-text \cite command
  }{}%
}


%%
% The placeins package provides the \FloatBarrier command.  This forces
% LaTeX to place all of the floats before proceeding.  We'll use this to
% keep the float (figure and table) numbers in sequence.
\RequirePackage{placeins}

%%
% Margin float environment

\newsavebox{\@dr@margin@floatbox}
\newenvironment{@dr@margin@float}[2][-1.2ex]%
  {\FloatBarrier% process all floats before this point so the figure/table numbers stay in order.
  \begin{lrbox}{\@dr@margin@floatbox}%
  \begin{minipage}{\marginparwidth}%
    \@dr@caption@font%
    \def\@captype{#2}%
    \hbox{}\vspace*{#1}%
    \@dr@caption@justification%
    \@dr@margin@par%
    \noindent%
  }
  {\end{minipage}%
  \end{lrbox}%
  \marginpar{\usebox{\@dr@margin@floatbox}}%
  }


%%
% Margin figure environment

\newenvironment{marginfigure}[1][-1.2ex]%
  {\begin{@dr@margin@float}[#1]{figure}}
  {\end{@dr@margin@float}}


%%
% Margin table environment

\newenvironment{margintable}[1][-1.2ex]%
  {\begin{@dr@margin@float}[#1]{table}}
  {\end{@dr@margin@float}}


%%
% Auto-detects the proper text alignment based on the various class options

\newcommand*{\@dr@justification@autodetect}{%
  \ifthenelse{\boolean{@dr@justified}}%
    {\justifying}%
    {\RaggedRight}%
}

%%
% Forces the outer edge of the caption to be set ragged.
% Therefore, on verso pages it's ragged left, and on recto pages it's ragged right.

\newcommand*{\@dr@justification@caption@outer}{%
  \ifthenelse{\boolean{@dr@float@recto}}%
    {\RaggedRight}%
    {\RaggedLeft}%
}

\newcommand*{\@dr@justification@outer}{%
  \@dr@checkoddpage%
  \ifthenelse{\boolean{@dr@odd@page}}%
    {\RaggedRight}%
    {\RaggedLeft}%
}



%%
% A collection of macros to be used with the new Tufte-style float environments.
% \setfloatalignment forces the caption placement to be treated as top, bottom, etc.
% \forcerectofloat forces the float to be treated as if it were appearing on a recto page.
% \forceversofloat does the same, but for verso pages.

\newcommand{\@dr@float@debug@info}{}% contains debug info generated as the float is processed
\newcommand{\@dr@float@debug}[1]{% adds debug info to the queue for output
  \ifthenelse{\equal{\@dr@float@debug@info}{}}%
    {\def\@dr@float@debug@info{#1}}%
    {\g@addto@macro\@dr@float@debug@info{\MessageBreak#1}}%
}

\newcommand{\floatalignment}{x}% holds the current float alignment (t, b, h, p)
\newcommand{\setfloatalignment}[1]{\global\def\floatalignment{#1}\@dr@float@debug{Forcing position: [#1]}}% manually sets the float alignment
\newboolean{@dr@float@recto}
\newcommand{\forcerectofloat}{\gsetboolean{@dr@float@recto}{true}\@dr@float@debug{Forcing page: [recto]}}
\newcommand{\forceversofloat}{\gsetboolean{@dr@float@recto}{false}\@dr@float@debug{Forcing page: [verso]}}

% Boxes to temporarily store our float and caption
\newsavebox{\@dr@figure@box}
\newsavebox{\@dr@caption@box}

% Save original LaTeX float environment
\let\@dr@orig@float\@float
\let\@dr@orig@endfloat\end@float

% New length for tweaking float captions
\newlength{\@dr@caption@vertical@offset}
\setlength{\@dr@caption@vertical@offset}{0pt}

% Store the caption and label contents
\newcommand{\@dr@stored@shortcaption}{}
\newcommand{\@dr@stored@caption}{}
\newcommand{\@dr@stored@label}{}

\long\def\@dr@caption[#1][#2]#3{%
  \ifthenelse{\isempty{#1}}%
    {\gdef\@dr@stored@shortcaption{#3}}%
    {\gdef\@dr@stored@shortcaption{#1}}%
  \gsetlength{\@dr@caption@vertical@offset}{-#2}% we want a positive offset to lower captions
  \gdef\@dr@stored@caption{#3}%
}

\newcommand{\@dr@label}[1]{%
  \gdef\@dr@stored@label{#1}%
}

\newcommand{\@dr@fps}{}

\newboolean{@dr@float@star}
\newlength{\@dr@float@contents@width}

%%
% Define a float environment to place the captions in the margin space

\newenvironment{@dr@float}[3][htbp]%
  {% begin @dr@float
    % Should this float be full-width or just text-width?
    \ifthenelse{\equal{#3}{star}}%
      {\gsetboolean{@dr@float@star}{true}}%
      {\gsetboolean{@dr@float@star}{false}}%
    % Check page side (recto/verso) and store detected value -- can be overriden in environment contents
    \@dr@checkoddpage%
    \ifthenelse{\boolean{@dr@odd@page}}%
      {\gsetboolean{@dr@float@recto}{true}\@dr@float@debug{Detected page: [recto/odd]}}%
      {\gsetboolean{@dr@float@recto}{false}\@dr@float@debug{Detected page: [verso/even]}}%
    % If the float placement specifier is 'b' and only 'b', then bottom-align the mini-pages, otherwise top-align them.
    \renewcommand{\@dr@fps}{#1}%
    \@dr@float@debug{Allowed positions: [#1]}%
    \ifthenelse{\equal{#1}{b}\OR\equal{#1}{B}}%
      {\renewcommand{\floatalignment}{b}\@dr@float@debug{Presumed position: [bottom]}}%
      {\renewcommand{\floatalignment}{t}\@dr@float@debug{Presumed position: [top]}}%
    % Capture the contents of the \caption and \label commands to use later
    \global\let\@dr@orig@caption\caption%
    \global\let\@dr@orig@label\label%
    \renewcommand{\caption}{\optparams{\@dr@caption}{[][0pt]}}%
    \renewcommand{\label}[1]{\@dr@label{##1}}%
    % Handle subfigure package compatibility
    \ifthenelse{\boolean{@dr@packages@subfigure}}{%
      % don't move the label while inside a \subfigure or \subtable command
      \global\let\label\@dr@orig@label%
    }{}% subfigure package is not loaded
    \@dr@orig@float{#2}[#1]%
    \ifthenelse{\boolean{@dr@float@star}}%
      {\setlength{\@dr@float@contents@width}{\@dr@fullwidth}}%
      {\setlength{\@dr@float@contents@width}{\textwidth}}%
    \begin{lrbox}{\@dr@figure@box}%
      \begin{minipage}[\floatalignment]{\@dr@float@contents@width}\hbox{}%
  }{% end @dr@float
      \par\hbox{}\vspace{-\baselineskip}\ifthenelse{\prevdepth>0}{\vspace{-\prevdepth}}{}% align baselines of boxes
      \end{minipage}%
    \end{lrbox}%
    % build the caption box
    \begin{lrbox}{\@dr@caption@box}%
      \begin{minipage}[\floatalignment]{\marginparwidth}\hbox{}%
        \ifthenelse{\NOT\equal{\@dr@stored@caption}{}}{\@dr@orig@caption[\@dr@stored@shortcaption]{\@dr@stored@caption}}{}%
        \ifthenelse{\NOT\equal{\@dr@stored@label}{}}{\@dr@orig@label{\@dr@stored@label}}{}%
        \par\vspace{-\prevdepth}%% TODO: DOUBLE-CHECK FOR SAFETY
      \end{minipage}%
    \end{lrbox}%
    % now typeset the stored boxes
    \begin{fullwidth}%
      \begin{minipage}[\floatalignment]{\linewidth}%
        \ifthenelse{\boolean{@dr@float@star}}%
          {\@dr@float@fullwidth[\@dr@caption@vertical@offset]{\@dr@figure@box}{\@dr@caption@box}}%
          {\@dr@float@textwidth[\@dr@caption@vertical@offset]{\@dr@figure@box}{\@dr@caption@box}}%
      \end{minipage}%
    \end{fullwidth}%
    \@dr@orig@endfloat% end original LaTeX float environment
    % output debug info
    \ifthenelse{\boolean{@dr@debug}}{%
      \typeout{^^J^^J----------- Tufte-LaTeX float information ----------}%
      \ifthenelse{\equal{\@dr@stored@label}{}}%
        {\typeout{Warning: Float unlabeled!}}%
        {\typeout{Float label: [\@dr@stored@label]}}%
      \typeout{Page number: [\thepage]}%
      \def\MessageBreak{^^J}%
      \typeout{\@dr@float@debug@info}%
      \ifthenelse{\boolean{@dr@symmetric}}%
        {\typeout{Symmetric: [true]}}%
        {\typeout{Symmetric: [false]}}%
      \typeout{----------------------------------------------------^^J^^J}%
    }{}%
    % reset commands and temp boxes and captions
    \gdef\@dr@float@debug@info{}%
    \let\caption\@dr@orig@caption%
    \let\label\@dr@orig@label%
    \begin{lrbox}{\@dr@figure@box}\hbox{}\end{lrbox}%
    \begin{lrbox}{\@dr@caption@box}\hbox{}\end{lrbox}%
    \gdef\@dr@stored@shortcaption{}%
    \gdef\@dr@stored@caption{}%
    \gdef\@dr@stored@label{}%
    \gsetlength{\@dr@caption@vertical@offset}{0pt}% reset caption offset
  }

\newcommand{\@dr@float@textwidth}[3][0pt]{%
  \ifthenelse{\NOT\boolean{@dr@symmetric}\OR\boolean{@dr@float@recto}}{%
    % asymmetric or page is odd, so caption is on the right
    \hbox{%
      \usebox{#2}%
      \hspace{\marginparsep}%
      \smash{\raisebox{#1}{\usebox{#3}}}%
    }%
    \@dr@float@debug{Caption position: [right]}%
  }{% symmetric pages and page is even, so caption is on the left
    \hbox{%
      \smash{\raisebox{#1}{\usebox{#3}}}%
      \hspace{\marginparsep}%
      \usebox{#2}%
    }%
    \@dr@float@debug{Caption position: [left]}%
  }%
}

\newcommand{\@dr@float@fullwidth}[3][0pt]{%
  \ifthenelse{\equal{\floatalignment}{b}}%
    {% place caption above figure
      \ifthenelse{\NOT\boolean{@dr@symmetric}\OR\boolean{@dr@float@recto}}%
        {\hfill\smash{\raisebox{#1}{\usebox{#3}}}\par\usebox{#2}\@dr@float@debug{Caption position: [above right]}}% caption on the right
        {\smash{\raisebox{#1}{\usebox{#3}}}\hfill\par\usebox{#2}\@dr@float@debug{Caption position: [above left]}}% caption on the left
    }{% place caption below figure
      \ifthenelse{\NOT\boolean{@dr@symmetric}\OR\boolean{@dr@float@recto}}%
        {\usebox{#2}\par\hfill\smash{\raisebox{#1}{\usebox{#3}}}\@dr@float@debug{Caption position: [below right]}}% caption on the right
        {\usebox{#2}\par\smash{\raisebox{#1}{\usebox{#3}}}\hfill\@dr@float@debug{Caption position: [below left]}}% caption on the left
    }%
}


%%
% Redefine the figure environment to place the captions in the margin space

\renewenvironment{figure}[1][htbp]%
  {\ifvmode\else\unskip\fi\begin{@dr@float}[#1]{figure}{}}
  {\end{@dr@float}}


%%
% Redefine the table environment to place the captions in the margin space

\renewenvironment{table}[1][htbp]
  {\ifvmode\else\unskip\fi\begin{@dr@float}[#1]{table}{}}
  {\end{@dr@float}}


%%
% Full-width figure

\renewenvironment{figure*}[1][htbp]%
  {\ifvmode\else\unskip\fi\begin{@dr@float}[#1]{figure}{star}}
  {\end{@dr@float}}


%%
% Full-width table

\renewenvironment{table*}[1][htbp]%
  {\ifvmode\else\unskip\fi\begin{@dr@float}[#1]{table}{star}}
  {\end{@dr@float}}


%%
% Full-page-width area

\newenvironment{fullwidth}
  {\ifthenelse{\boolean{@dr@symmetric}}%
     {\ifthenelse{\boolean{@dr@changepage}}{\begin{adjustwidth*}{}{-\@dr@overhang}}{\begin{adjustwidth}[]{}{-\@dr@overhang}}}%
     {\begin{adjustwidth}{}{-\@dr@overhang}}%
  }%
  {\ifthenelse{\boolean{@dr@symmetric}}%
    {\ifthenelse{\boolean{@dr@changepage}}{\end{adjustwidth*}}{\end{adjustwidth}}}%
    {\end{adjustwidth}}%
  }

%%
% Format the captions in a style similar to the sidenotes

\long\def\@caption#1[#2]#3{%
  \par%
  \addcontentsline{\csname ext@#1\endcsname}{#1}%
    {\protect\numberline{\csname the#1\endcsname}{\ignorespaces #2}}%
  \begingroup%
    \@parboxrestore%
    \if@minipage%
      \@setminipage%
    \fi%
    \@dr@caption@font\@dr@caption@justification%
    \noindent\csname fnum@#1\endcsname: \ignorespaces#3\par%
    %\@makecaption{\csname fnum@#1\endcsname}{\ignorespaces #3}\par
  \endgroup}

%%
% If we're NOT using XeLaTeX and the `nofonts' class option was NOT provided,
% we should load the Palatino, Helvetica, and Bera Mono fonts (if they are
% installed.)

\ifthenelse{\boolean{@dr@loadfonts}\AND\NOT\boolean{@dr@xetex}\AND\NOT\boolean{@dr@luatex}}{%
  \IfFileExists{mathpazo.sty}{\RequirePackage[osf,sc]{mathpazo}}{}
  \IfFileExists{helvet.sty}{\RequirePackage[scaled=0.90]{helvet}}{}
  \IfFileExists{beramono.sty}{\RequirePackage[scaled=0.85]{beramono}}{}
  \RequirePackage[T1]{fontenc}
  \RequirePackage{textcomp}
}{}


%%
% Turns newlines into spaces.  Based on code from the `titlesec' package.

\DeclareRobustCommand{\@dr@newlinetospace}{%
  \@ifstar{\@dr@newlinetospace@i}{\@dr@newlinetospace@i}%
}

\def\@dr@newlinetospace@i{%
  \ifdim\lastskip>\z@\else\space\fi
  \ignorespaces%
}

\DeclareRobustCommand{\newlinetospace}[1]{%
  \let\@dr@orig@cr\\% save the original meaning of \\
  \def\\{\@dr@newlinetospace}% turn \\ and \\* into \space
  \let\newline\\% turn \newline into \space
  #1%
  \let\\\@dr@orig@cr% revert to original meaning of \\
}


%%
% Sets up the running heads and folios.

\RequirePackage{fancyhdr}

% Set the default page style to 'fancy'
\pagestyle{fancy}

% Set the header/footer width to be the body text block plus the margin
% note area.
\AtBeginDocument{%
  \ifthenelse{\boolean{@dr@symmetric}}
    {\fancyhfoffset[LE,RO]{\@dr@overhang}}
    {\fancyhfoffset[RE,RO]{\@dr@overhang}}
}

\renewcommand{\headrulewidth}{3pt}
\renewcommand{\footrulewidth}{1pt}
\renewcommand{\headrule}{\hbox to\headwidth{%
  \color{drblue}\leaders\hrule height \headrulewidth\hfill}}
\renewcommand{\footrule}{\hbox to\headwidth{%
  \color{drblue}\leaders\hrule height \footrulewidth\hfill}}

% The 'fancy' page style is the default style for all pages.
\fancyhf{} % clear header and footer fields
\ifthenelse{\boolean{@dr@twoside}}
  {\fancyhead[LE]{\thepage\quad\smallcaps{\newlinetospace{\plainauthor}}}%
    \fancyhead[RO]{\smallcaps{\newlinetospace{\plaintitle}}\quad\thepage}}
  {\fancyhead[RE,RO]{}%
  % \smallcaps{\newlinetospace{\plaintitle}}\quad\thepage
   \fancyfoot[CE, CO]{%
   \vspace*{6pt}
   {\parbox{1.25\textwidth}\centering\small\textbf{PHONE} (615) 567-8853 \textbf{WEB} digitalreasoning.com \textbf{ADDRESS} 701 Cool Springs Blvd | Suite 110 | Franklin, Tennessee 37067\\
   \vspace*{10pt}
\textcopyright Copyright 2016. All Rights Reserved. Digital Reasoning\textregistered\enspace and Synthesys\textregistered\enspace are registered trademarks of Digital Reasoning Systems, Inc.}}
}

% Redefine \chapter so the first page of each chapter is full-width
% \renewcommand{\chapter}{%
%   \if@openright\cleardoublepage\else\clearpage\fi
%   % Remove the margin notes area
%   \newgeometry{%
%     width={\textwidth+\marginparsep+\marginparwidth},
%     marginparsep=0pt,
%     marginparwidth=0pt,
%   }%
%   \thispagestyle{plain}%
%   \global\@topnum\z@
%   \@afterindentfalse
%   % Restore the margin notes area
%   \afterpage{\aftergroup\restoregeometry}%
%   \secdef\@chapter\@schapter
% }


% The `plain' page style is used on chapter opening pages.
% In Tufte's /Beautiful Evidence/ he never puts page numbers at the
% bottom of pages -- the folios are unexpressed.
\fancypagestyle{plain}{
  \fancyhf{} % clear header and footer fields
  \renewcommand{\headrulewidth}{3pt}
\renewcommand{\footrulewidth}{1pt}
\renewcommand{\headrule}{\hbox to\headwidth{%
  \color{drblue}\leaders\hrule height \headrulewidth\hfill}}
\renewcommand{\footrule}{\hbox to\headwidth{%
  \color{drblue}\leaders\hrule height \footrulewidth\hfill}}
    \fancyfoot[CE, CO]{%
    \vspace*{6pt}%
   {\parbox{\textwidth}\centering\small\textbf{PHONE} (615) 567-8853 \textbf{WEB} digitalreasoning.com \textbf{ADDRESS} 701 Cool Springs Blvd | Suite 110 | Franklin, Tennessee 37067\\
   \vspace*{10pt}
  \textcopyright Copyright 2016. All Rights Reserved. Digital Reasoning\textregistered\enspace and Synthesys\textregistered\enspace are registered trademarks of Digital Reasoning Systems, Inc.}}
}

% The `empty' page style suppresses all headers and footers.
% It's used on title pages and `intentionally blank' pages.
\fancypagestyle{empty}{
  \fancyhf{} % clear header and footer fields
}


%%
% Set raggedright and paragraph indentation for document

\AtBeginDocument{\@dr@justification}


%%
% Prints the list of class options and their states.

\newcommand{\typeoutbool}[2]{%
  \ifthenelse{\boolean{#2}}
    {\typeout{\space\space#1: true}}
    {\typeout{\space\space#1: false}}
}

\newcommand{\typeoutstr}[2]{%
  \typeout{\space\space#1: #2}
}

\newcommand{\PrintTufteSettings}{%
  \typeout{-------------------- Tufte-LaTeX settings ----------}
  \typeout{Class: \@dr@pkgname}
  \typeout{}
  \typeout{Class options:}
  \typeoutbool{a4paper}{@dr@afourpaper}
  \typeoutbool{b5paper}{@dr@bfivepaper}
  \typeoutbool{load fonts}{@dr@loadfonts}
  \typeoutbool{fully-justified}{@dr@justified}
  \typeoutbool{letterspacing}{@dr@letterspace}
  \typeoutbool{sans-serif sidenotes}{@dr@sfsidenotes}
  \typeoutbool{symmetric margins}{@dr@symmetric}
  \typeoutbool{titlepage}{@dr@titlepage}
  \typeoutbool{twoside}{@dr@twoside}
  \typeoutbool{debug}{@dr@debug}
  \typeout{}
  \typeout{Internal variables:}
  \typeoutbool{[twoside]}{@twoside}
  \typeoutbool{pdflatex}{@dr@pdf}
  \typeoutbool{xelatex}{@dr@xetex}
  \typeout{----------------------------------------------------}
}

%%
% Amount of space to skip before \newthought or after title block

\newskip\drskipamount
\drskipamount=1.0\baselineskip plus 0.5ex minus 0.2ex

\newcommand{\drbreak}{\par\ifdim\lastskip<\drskipamount
  \removelastskip\penalty-100\drskip\fi}

\newcommand{\drskip}{\vspace\drskipamount}


%%
% Produces a full title page

\newcommand{\maketitlepage}[0]{%
  \clearpage%
  \thispagestyle{empty}
  \sffamily%
  \begin{fullwidth}%
  \begin{figure}[t]
  \includegraphics[width=2.29in,height=0.75in]{"DigitalReasoningLogo".jpg}
  \end{figure}

  \vspace*{3.5in}%
  
  \fontsize{20}{25}\selectfont\par\noindent\textcolor{drblue}{\thanklesstitle}%
  \vspace*{1.5in}
  \ifthenelse{\value{authors}=1}{
    \fontsize{7}{14}\selectfont\par\noindent\textcolor{black}{\thanklessauthor}
  }{
  \begin{figure}[b]
  \begin{minipage}[b]{\textwidth}
  \fontsize{10}{15}\selectfont
    \begin{tabbing}
      Prepared for: \thanklesspreparedfor \\
  Prepare\=d by: \hspace*{1.25in} \= \\
    \newcounter{tempcount}
    \forloop{tempcount}{0}{\value{tempcount} < \value{authors}} 
      {\> \getauthor{tempcount}}
      \@date
    \end{tabbing}
    \end{minipage}
    \end{figure}
  }
  \end{fullwidth}%
}

%%
% Title block

\renewcommand{\maketitle}{%
  \newpage
  \global\@topnum\z@% prevent floats from being placed at the top of the page
  \begingroup
    \setlength{\parindent}{0pt}%
    \setlength{\parskip}{4pt}%
    \let\@@title\@empty
    \let\@@author\@empty
    \let\@@date\@empty
    \ifthenelse{\boolean{@dr@sfsidenotes}}{%
      \gdef\@@title{\sffamily\LARGE\allcaps{\@title}\par}%
      \gdef\@@author{\sffamily\Large\allcaps{\@author}\par}%
      \gdef\@@date{\sffamily\Large\allcaps{\@date}\par}%
    }{%
      \gdef\@@title{\LARGE\itshape\@title\par}%
      \gdef\@@author{\Large\itshape\@author\par}%
      \gdef\@@date{\Large\itshape\@date\par}%
    }%
    \@@title
    \@@author
    \@@date
  \endgroup
  \thispagestyle{plain}% suppress the running head
  \drbreak% add some space before the text begins
  \@afterindentfalse\@afterheading% suppress indentation of the next paragraph
}


%%
% Title page (if the `titlepage' option was passed to the dr-handout
% class.)

\ifthenelse{\boolean{@dr@titlepage}}
  {\renewcommand{\maketitle}{\maketitlepage}}
  {}

%%
% When \cleardoublepage is called, produce a blank (empty) page -- i.e.,
% without headers and footers
\def\cleardoublepage{\clearpage\if@twoside\ifodd\c@page\else
  \hbox{}
  %\vspace*{\fill}
  %\begin{center}
  %  This page intentionally contains only this sentence.
  %\end{center}
  %\vspace{\fill}
  \thispagestyle{empty}
  \newpage
  \if@twocolumn\hbox{}\newpage\fi\fi\fi}

%%
% Make Tuftian-style section headings and TOC formatting

\titleformat{\chapter}%
  % [display]% shape
  % {\relax\ifthenelse{\NOT\boolean{@dr@symmetric}}{\begin{fullwidth}}{}}% format applied to label+text
  % {\bfseries\LARGE\thechapter}% label
  % {0pt}% horizontal separation between label and title body
  % {\huge\rmfamily}% before the title body
  % [\ifthenelse{\NOT\boolean{@dr@symmetric}}{\end{fullwidth}}{}]% after the title body
  [display]% shape
  {\relax\begin{fullwidth}}% format applied to label+text
  {\bfseries\Large\thechapter}% label
  {0pt}% horizontal separation between label and title body
  {\huge\rmfamily}% before the title body
  [\end{fullwidth}]% after the title body

\titleformat{\section}%
  [hang]% shape
  {\normalfont\LARGE}% format applied to label+text
  {\uppercase{\thesection}}% label
  {1em}% horizontal separation between label and title body
  {}% before the title body
  []% after the title body

\titleformat{\subsection}%
  [hang]% shape
  {\normalfont\large\bfseries\color{drblue}}% format applied to label+text
  {\uppercase{\thesubsection}}% label
  {1em}% horizontal separation between label and title body
  {}% before the title body
  []% after the title body

\titleformat{\subsubsection}%
  [hang]% shape
  {\normalfont\large\itshape}% format applied to label+text
  {\thesubsubsection}% label
  {2em}% horizontal separation between label and title body
  {}% before the title body
  []% after the title body

\titleformat{\paragraph}%
  [runin]% shape
  {\normalfont\itshape}% format applied to label+text
  {\theparagraph}% label
  {1em}% horizontal separation between label and title body
  {}% before the title body
  []% after the title body

\titlespacing*{\chapter}{0pt}{-20pt}{0pt}
\titlespacing*{\section}{0pt}{0ex plus 1ex minus .2ex}{2.3ex plus .2ex} %3.5
\titlespacing*{\subsection}{0pt}{0ex plus 1ex minus .2ex}{1.5ex plus.2ex} %3.25
\titlespacing*{\subsubsection}{0pt}{3ex plus 1ex minus .2ex}{1.2ex plus.2ex}

% Formatting for main TOC (printed in front matter)
% {section} [left] {above} {before w/label} {before w/o label} {filler + page} [after]
\ifthenelse{\boolean{@dr@toc}}{%
  \titlecontents{part}% FIXME
    [0em] % distance from left margin
    {\vspace{1.5\baselineskip}\begin{fullwidth}\Large\rmfamily\itshape} % above (global formatting of entry)
    {\contentslabel{2em}} % before w/label (label = ``II'')
    {} % before w/o label
    {\rmfamily\upshape\qquad\thecontentspage} % filler + page (leaders and page num)
    [\end{fullwidth}] % after
  \titlecontents{chapter}%
    [0em] % distance from left margin
    {\vspace{1.5\baselineskip}\begin{fullwidth}\Large\rmfamily} % above (global formatting of entry)
    {\hspace*{0em}\contentslabel{2em}} % before w/label (label = ``2'')
    {\hspace*{0em}} % before w/o label
    {\rmfamily\upshape\qquad\thecontentspage} % filler + page (leaders and page num)
    [\end{fullwidth}] % after
  \titlecontents{section}% FIXME
    [0em] % distance from left margin
    {\vspace{0\baselineskip}\begin{fullwidth}\Large\rmfamily} % above (global formatting of entry)
    {\hspace*{2em}\contentslabel{2em}} % before w/label (label = ``2.6'')
    {\hspace*{2em}} % before w/o label
    {\rmfamily\upshape\qquad\thecontentspage} % filler + page (leaders and page num)
    [\end{fullwidth}] % after
  \titlecontents{subsection}% FIXME
    [0em] % distance from left margin
    {\vspace{0\baselineskip}\begin{fullwidth}\large\rmfamily} % above (global formatting of entry)
    {\hspace*{4em}\contentslabel{4em}} % before w/label (label = ``2.6.1'')
    {\hspace*{4em}} % before w/o label
    {\rmfamily\upshape\qquad\thecontentspage} % filler + page (leaders and page num)
    [\end{fullwidth}] % after
  \titlecontents{subsubsection}% FIXME
    [2em] % distance from left margin
    {\vspace{0\baselineskip}\begin{fullwidth}\large\rmfamily\itshape} % above (global formatting of entry)
    {\hspace*{6em}\contentslabel{6em}} % before w/label (label = ``2.6.1.3'')
    {\hspace*{6em}} % before w/o label
    {\rmfamily\upshape\qquad\thecontentspage} % filler + page (leaders and page num)
    [\end{fullwidth}] % after
  \titlecontents{paragraph}% FIXME
    [4em] % distance from left margin
    {\vspace{0\baselineskip}\begin{fullwidth}\normalsize\rmfamily\itshape} % above (global formatting of entry)
    {\hspace*{6em}\contentslabel{2em}} % before w/label (label = ``2.6.0.0.1'')
    {\hspace*{6em}} % before w/o label
    {\rmfamily\upshape\qquad\thecontentspage} % filler + page (leaders and page num)
    [\end{fullwidth}] % after
}{}

%%
% Format lists of figures/tables

\renewcommand\listoffigures{%
  \ifthenelse{\equal{\@dr@class}{drreport}}%
    {\chapter*{\listfigurename}}%
    {\section*{\listfigurename}}%
%  \begin{fullwidth}%
    \@starttoc{lof}%
%  \end{fullwidth}%
}

\renewcommand\listoftables{%
  \ifthenelse{\equal{\@dr@class}{drreport}}%
    {\chapter*{\listtablename}}%
    {\section*{\listtablename}}%
%  \begin{fullwidth}%
    \@starttoc{lot}%
%  \end{fullwidth}%
}

\newcommand{\@dr@lof@line}[2]{%
  % #1 is the figure/table number and its caption text
  % #2 is the page number on which the figure/table appears
  \leftskip 0.0em
  \rightskip 0em
  \parfillskip 0em plus 1fil
  \parindent 0.0em
  \@afterindenttrue
  \interlinepenalty\@M
  \leavevmode
  \@tempdima 2.0em
  \advance\leftskip\@tempdima
  \null\nobreak\hskip -\leftskip
  {#1}\nobreak\qquad\nobreak#2%
  \par%
}

\renewcommand*\l@figure{\@dr@lof@line}
\let\l@table\l@figure


%%
% A handy command to disable hyphenation for short bits of text.
% Borrowed from Peter Wilson's `hyphenat' package.

\AtBeginDocument{%
  \@ifpackageloaded{hyphenat}{}{%
    \newlanguage\langwohyphens% define a language without hyphenation rules
    \providecommand{\nohyphens}[1]{{\language\langwohyphens #1}}% used for short bits of text
    \providecommand{\nohyphenation}{\language\langwohyphens}% can be used inside environments for longer text
  }%
}

%%
% Redefine \bibsection to not mark the running heads.
% (Code modified from natbib.sty.)

\ifthenelse{\boolean{@dr@loadnatbib}}{%
  \@ifundefined{chapter}{%
    \renewcommand\bibsection{\section*{\refname}}%
  }{%
    \@ifundefined{NAT@sectionbib}{%
      \renewcommand\bibsection{\chapter{\bibname}}%
    }{%
      \renewcommand\bibsection{\section*{\bibname}}%
    }%
  }%
}

%%
% An index environment to mimic Tufte's indexes

\RequirePackage{multicol}
\renewenvironment{theindex}{%
  \ifthenelse{\equal{\@dr@class}{drreport}}%
    {\chapter{\indexname}}%
    {\section*{\indexname}}%
  \begin{fullwidth}%
  \small%
  \parskip0pt%
  \parindent0pt%
  \let\item\@idxitem%
  \begin{multicols}{3}%
}{%
  \end{multicols}%
  \end{fullwidth}%
}
\renewcommand\@idxitem{\par\hangindent 2em}
\renewcommand\subitem{\par\hangindent 3em\hspace*{1em}}
\renewcommand\subsubitem{\par\hangindent 4em\hspace*{2em}}
\renewcommand\indexspace{\par\addvspace{1.0\baselineskip plus 0.5ex minus 0.2ex}\relax}%
\newcommand{\lettergroup}[1]{}% swallow the letter heading in the index


%%
% A couple commands to incresae the number of floats you can use at a time.

\def\morefloats{% provides a total of 52 floats
  \ifthenelse{\isundefined{\bx@S}}{%
    \@dr@debug@info@noline{Adding 34 more float slots.}
    \newinsert\bx@S
    \newinsert\bx@T
    \newinsert\bx@U
    \newinsert\bx@V
    \newinsert\bx@W
    \newinsert\bx@X
    \newinsert\bx@Y
    \newinsert\bx@Z
    \newinsert\bx@a
    \newinsert\bx@b
    \newinsert\bx@c
    \newinsert\bx@d
    \newinsert\bx@e
    \newinsert\bx@f
    \newinsert\bx@g
    \newinsert\bx@h
    \newinsert\bx@i
    \newinsert\bx@j
    \newinsert\bx@k
    \newinsert\bx@l
    \newinsert\bx@m
    \newinsert\bx@n
    \newinsert\bx@o
    \newinsert\bx@p
    \newinsert\bx@q
    \newinsert\bx@r
    \newinsert\bx@s
    \newinsert\bx@t
    \newinsert\bx@u
    \newinsert\bx@v
    \newinsert\bx@w
    \newinsert\bx@x
    \newinsert\bx@y
    \newinsert\bx@z
    \gdef\@freelist{\@elt\bx@A\@elt\bx@B\@elt\bx@C\@elt\bx@D\@elt\bx@E
                    \@elt\bx@F\@elt\bx@G\@elt\bx@H\@elt\bx@I\@elt\bx@J
                    \@elt\bx@K\@elt\bx@L\@elt\bx@M\@elt\bx@N
                    \@elt\bx@O\@elt\bx@P\@elt\bx@Q\@elt\bx@R
                    \@elt\bx@S\@elt\bx@T\@elt\bx@U\@elt\bx@V
                    \@elt\bx@W\@elt\bx@X\@elt\bx@Y\@elt\bx@Z
                    \@elt\bx@a\@elt\bx@b\@elt\bx@c\@elt\bx@d\@elt\bx@e
                    \@elt\bx@f\@elt\bx@g\@elt\bx@h\@elt\bx@i\@elt\bx@j
                    \@elt\bx@k\@elt\bx@l\@elt\bx@m\@elt\bx@n
                    \@elt\bx@o\@elt\bx@p\@elt\bx@q\@elt\bx@r
                    \@elt\bx@s\@elt\bx@t\@elt\bx@u\@elt\bx@v
                    \@elt\bx@w\@elt\bx@x\@elt\bx@y\@elt\bx@z}%
  }{% we've already added another 34 floats, so we'll add 26 more, but that's it!
    \ifthenelse{\isundefined{\bx@AA}}{%
      \@dr@debug@info@noline{Adding 26 more float slots.}
      \newinsert\bx@AA
      \newinsert\bx@BB
      \newinsert\bx@CC
      \newinsert\bx@DD
      \newinsert\bx@EE
      \newinsert\bx@FF
      \newinsert\bx@GG
      \newinsert\bx@HH
      \newinsert\bx@II
      \newinsert\bx@JJ
      \newinsert\bx@KK
      \newinsert\bx@LL
      \newinsert\bx@MM
      \newinsert\bx@NN
      \newinsert\bx@OO
      \newinsert\bx@PP
      \newinsert\bx@QQ
      \newinsert\bx@RR
      \newinsert\bx@SS
      \newinsert\bx@TT
      \newinsert\bx@UU
      \newinsert\bx@VV
      \newinsert\bx@WW
      \newinsert\bx@XX
      \newinsert\bx@YY
      \newinsert\bx@ZZ
      \gdef\@freelist{\@elt\bx@A\@elt\bx@B\@elt\bx@C\@elt\bx@D\@elt\bx@E
                      \@elt\bx@F\@elt\bx@G\@elt\bx@H\@elt\bx@I\@elt\bx@J
                      \@elt\bx@K\@elt\bx@L\@elt\bx@M\@elt\bx@N
                      \@elt\bx@O\@elt\bx@P\@elt\bx@Q\@elt\bx@R
                      \@elt\bx@S\@elt\bx@T\@elt\bx@U\@elt\bx@V
                      \@elt\bx@W\@elt\bx@X\@elt\bx@Y\@elt\bx@Z
                      \@elt\bx@a\@elt\bx@b\@elt\bx@c\@elt\bx@d\@elt\bx@e
                      \@elt\bx@f\@elt\bx@g\@elt\bx@h\@elt\bx@i\@elt\bx@j
                      \@elt\bx@k\@elt\bx@l\@elt\bx@m\@elt\bx@n
                      \@elt\bx@o\@elt\bx@p\@elt\bx@q\@elt\bx@r
                      \@elt\bx@s\@elt\bx@t\@elt\bx@u\@elt\bx@v
                      \@elt\bx@w\@elt\bx@x\@elt\bx@y\@elt\bx@z
                      \@elt\bx@AA\@elt\bx@BB\@elt\bx@CC\@elt\bx@DD\@elt\bx@EE
                      \@elt\bx@FF\@elt\bx@GG\@elt\bx@HH\@elt\bx@II\@elt\bx@JJ
                      \@elt\bx@KK\@elt\bx@LL\@elt\bx@MM\@elt\bx@NN
                      \@elt\bx@OO\@elt\bx@PP\@elt\bx@QQ\@elt\bx@RR
                      \@elt\bx@SS\@elt\bx@TT\@elt\bx@UU\@elt\bx@VV
                      \@elt\bx@WW\@elt\bx@XX\@elt\bx@YY\@elt\bx@ZZ}%
    }{%
      \@dr@error{You may only call \string\morefloats\space twice. See the Tufte-LaTeX documentation for other workarounds}
        {There are already 78 float slots allocated. Try using \string\FloatBarrier\space or \string\clearpage\space to place some floats before creating more.}
    }%
  }%
}


%%
% Detect if the subfigure package has been loaded

\newboolean{@dr@packages@subfigure}
\setboolean{@dr@packages@subfigure}{false}
\AtBeginDocument{%
  \@ifpackageloaded{subfigure}
    {\gsetboolean{@dr@packages@subfigure}{true}}
    {\gsetboolean{@dr@packages@subfigure}{false}}%
}


%%
% Detect of the float package has been loaded

\AtBeginDocument{%
  \@ifpackageloaded{float}{%
    % Save the redefined float environment (instead of the LaTeX float environment)
    \let\@dr@orig@float\@float
    \let\@dr@orig@endfloat\end@float

    % Define Tuftian float styles (with the caption in the margin)
    \newcommand{\floatc@drplain}[2]{%
      \begin{lrbox}{\@dr@caption@box}%
        \begin{minipage}[\floatalignment]{\marginparwidth}\hbox{}%
          \@dr@caption@font{\@fs@cfont #1:} #2\par%
        \end{minipage}%
      \end{lrbox}%
      \smash{\hspace{\@dr@caption@fill}\usebox{\@dr@caption@box}}%
    }
    \newcommand{\fs@drplain}{%
      \def\@fs@cfont{\@dr@caption@font}%
      \let\@fs@capt\floatc@drplain%
      \def\@fs@pre{}%
      \def\@fs@post{}%
      \def\@fs@mid{}%
      \let\@fs@iftopcapt\iftrue%
    }
    \let\fs@drplaintop=\fs@drplain
    \let\floatc@drplaintop=\floatc@drplain
    \newcommand\floatc@drruled[2]{%
      {\@fs@cfont #1} #2\par%
    }
    \newcommand\fs@drruled{%
      \def\@fs@cfont{\@dr@caption@font}%
      \let\@fs@capt\floatc@drplain%
      \def\@fs@pre{\hrule height.8pt depth0pt width\textwidth \kern2pt}%
      \def\@fs@post{\kern2pt\hrule width\textwidth\relax}%
      \def\@fs@mid{}%
      \let\@fs@iftopcapt\iftrue%
    }
    \newcommand\fs@drboxed{%
      \def\@fs@cfont{}%
      \let\@fs@capt\floatc@drplain%
      \def\@fs@pre{%
        \setbox\@currbox\vbox{\hbadness10000
        \moveleft3.4pt\vbox{\advance\hsize by6.8pt
          \hrule \hbox to\hsize{\vrule\kern3pt
            \vbox{\kern3pt\box\@currbox\kern3pt}\kern3pt\vrule}\hrule}}
      }%
      \def\@fs@mid{\kern2pt}%
      \def\@fs@post{}%
      \let\@fs@iftopcapt\iftrue%
    }
  }{%
    % Nothing to do
  }
}

\AtBeginDocument{%
  \@ifpackageloaded{algorithm}{%
    % Set the float style to the Tuftian version
    \ifthenelse{\equal{\ALG@floatstyle}{plain}\OR\equal{\ALG@floatstyle}{ruled}\OR\equal{\ALG@floatstyle}{boxed}}{%
      \@dr@info@noline{Switching algorithm float style from \ALG@floatstyle\space to dr\ALG@floatstyle}%
      \floatstyle{dr\ALG@floatstyle}%
      \restylefloat{algorithm}%
    }{}%
  }{%
    % Nothing to do
  }
}


%%
% For compatibility with the subfig package, we'll set captions=false so that
% it doesn't load the caption package (which modifies our own caption
% formatting).

\PassOptionsToPackage{caption=false}{subfig}


%%
% If debugging is enabled, print the Tufte-LaTeX options and the list of
% files.

\ifthenelse{\boolean{@dr@debug}}
  {\PrintTufteSettings\listfiles}
  {}


%%
% If there is a `dr-common-local.tex' file, load it up.

\IfFileExists{dr-common-local.tex}
  {\input{dr-common-local.tex}%
   \@dr@info@noline{Loading dr-common-local.tex}}
  {}

%%
% End of file
\endinput
